#!/usr/bin/env bash

# hist - Bash history supertool
# Location: ~/.bin/hist (make sure it's in $PATH)
# Requires: git, grep, sort, less
# Optional: fzf, rg, bat

HIST_DIR="${HOME}/.history"
HOSTNAME_SHORT=$(hostname | cut -d '.' -f 1 | tr '[:upper:]' '[:lower:]')
DATE_FMT="%Y-%m-%d %H:%M"  # e.g., "Jul 19 12:43"

hist_usage() {
    echo "Usage: hist {recent|grep|push} [args...]"
    echo
    echo "Subcommands:"
    echo "  recent       Show most recent commands on this machine"
    echo "               Options: --all, -a  Include all machines"
    echo
    echo "  grep <term>  Search command history"
    echo "               Options: --all, -a  Search across all machines"
    echo
    echo "  push         Commit & push .history git repo"
}

hist_parse_and_print() {
    local search="$1"
    local date_fmt="%Y-%m-%d %H:%M"

    awk -v DATE_FMT="$date_fmt" -v SEARCH="$search" '
    FILENAME ~ /[^/]+$/ {
        tty = FILENAME;
        sub(/.*\//, "", tty);            # strip path
        sub(/^[0-9\-]+_/, "", tty);      # strip date_
    }
    /^#/ {
        split(substr($0, 2), meta, ":");
        ts = meta[1];
        dir = meta[2];
        getline cmd;
        if (SEARCH == "" || cmd ~ SEARCH) {
            printf "%s  %-8s  %s\n", strftime(DATE_FMT, ts), tty, cmd;
        }
    }
    ' "$@"
}


hist_recent() {
    local all=0
    [[ "$1" == "--all" || "$1" == "-a" ]] && all=1

    local files
    if [[ "$all" -eq 1 ]]; then
        files=$(find "$HIST_DIR" -type f)
    else
        files=$(find "$HIST_DIR/$HOSTNAME_SHORT" -type f)
    fi

    hist_parse_and_print "" $files | sort -r | less
}

hist_grep() {
    local all=0
    [[ "$1" == "--all" || "$1" == "-a" ]] && { all=1; shift; }

    local search="$1"
    if [[ -z "$search" ]]; then
        echo "Usage: hist grep [--all] <term>"
        return 1
    fi

    local files
    if [[ "$all" -eq 1 ]]; then
        files=$(find "$HIST_DIR" -type f)
    else
        files=$(find "$HIST_DIR/$HOSTNAME_SHORT" -type f)
    fi

    hist_parse_and_print "$search" $files | sort -r | less
}

hist_push() {
    cd "$HIST_DIR" || { echo "Cannot access $HIST_DIR"; return 1; }
    git add .
    git commit -m "Auto-history push $(date)"
    git push
}

# Main entrypoint
case "$1" in
    recent)
        shift
        hist_recent "$@"
        ;;
    grep)
        shift
        hist_grep "$@"
        ;;
    push)
        hist_push
        ;;
    *)
        hist_usage
        ;;
esac
